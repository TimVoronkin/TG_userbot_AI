from pyrogram import Client  # type: ignore
from pyrogram.errors import PeerIdInvalid  # type: ignore
from pyrogram.enums import ChatType  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from datetime import datetime
import asyncio
import markdown # type: ignore
import bleach # type: ignore
allowed_tags = ['b', 'i', 'u', 'code', 'pre', 'a', 'blockquote']
from google import genai  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Geminy

# from config import admin_username, TG_api_id, TG_api_hash, TGbot_token, AI_api_key  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
import os
admin_username = os.getenv("admin_username")
TG_api_id = os.getenv("TG_api_id")
TG_api_hash = os.getenv("TG_api_hash")
TGbot_token = os.getenv("TGbot_token")
AI_api_key = os.getenv("AI_api_key")
if not all([admin_username, TG_api_id, TG_api_hash, TGbot_token, AI_api_key]):
    raise ValueError("One or more environment variables are missing!")


# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Geminy
AI_client = genai.Client(api_key=AI_api_key)
AI_prompt = "–û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ –≤—ã–¥–µ–ª–∏ –≥–ª–∞–≤–Ω—ã–µ —Ç–µ–º—ã, –∏–¥–µ–∏, –ª—é–¥–∏ –∏—Ç–¥ –≤ —ç—Ç–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ. –ù–∞–ø–∏—à–∏ –ø—É–∫–Ω—Ç–∞–º–∏, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"

lines_crop = 10 * 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞. 3 –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–±—ã—á–Ω–æ 3 —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ

delay_TG = 0.5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ API

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram
app = Client("my_userbot", api_id=TG_api_id, api_hash=TG_api_hash)

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
dialog_history = {}
my_chat_histoty = "No chat history available."

# –∫–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    log_to_console(update)
    await update.message.reply_text('Hello World!')

# –∫–æ–º–∞–Ω–¥–∞ /ping
async def ping(update: Update, context: CallbackContext) -> None:
    log_to_console(update)
    if update.message.from_user.username == admin_username:

        results = []
        processing_message = await update.message.reply_text("\n".join(results) + "‚è≥ Running diagnostics...")

        # Check Telegram bot connectivity
        try:
            await context.bot.get_me()
            results.append("‚úÖ Telegram bot is working correctly.")
        except Exception as e:
            results.append(f"‚ùå Telegram bot error: {e}")

        # Check Pyrogram userbot connectivity
        try:
            await app.get_me()  # –£–±—Ä–∞–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ async with
            results.append("‚úÖ Pyrogram userbot is working correctly.")
        except Exception as e:
            results.append(f"‚ùå Pyrogram userbot error: {e}")

        # Check AI client connectivity
        try:
            AI_client.models.list()
            results.append("‚úÖ Geminy AI client is working correctly.")
        except Exception as e:
            results.append(f"‚ùå Geminy AI client error: {e}")

        # Send diagnostic results
        await processing_message.edit_text(f"Bot is working! üëå<blockquote expandable>{'\n'.join(results)}</blockquote>", parse_mode="HTML")

# –∫–æ–º–∞–Ω–¥–∞ /list
async def list_chats(update: Update, context: CallbackContext) -> None:
    log_to_console(update)
    if update.message.from_user.username == admin_username:
        try:
            limit = int(context.args[0]) if context.args else 5
            if limit <= 0:
                limit = 5
        except ValueError:
            limit = 5

        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —á–∞—Ç—ã
            dialogs = []
            async for dialog in app.get_dialogs(limit=limit):  # –£–±—Ä–∞–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ async with

                display_name = dialog.chat.title if dialog.chat.title else (dialog.chat.first_name or '') + ' ' + (dialog.chat.last_name or '')

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
                if dialog.chat.type == ChatType.PRIVATE:
                    icon = "üë§"
                    direct_link = f"tg://user?id={dialog.chat.id}"
                elif dialog.chat.type == ChatType.GROUP:
                    icon = "ü´Ç"
                    direct_link = f"tg://join?invite={dialog.chat.invite_link}" if dialog.chat.invite_link else ""
                elif dialog.chat.type == ChatType.SUPERGROUP:
                    icon = "üë•"
                    direct_link = f"tg://join?invite={dialog.chat.invite_link}" if dialog.chat.invite_link else f"t.me/c/{str(dialog.chat.id)[3:]}/-1"
                elif dialog.chat.type == ChatType.CHANNEL:
                    icon = "üì¢"
                    direct_link = f"tg://resolve?domain={dialog.chat.username}" if dialog.chat.username else f"t.me/c/{str(dialog.chat.id)[3:]}/-1"
                elif dialog.chat.type == ChatType.BOT:
                    icon = "ü§ñ"
                    direct_link = f"t.me/{dialog.chat.username}" if dialog.chat.username else ""
                else:
                    icon = "‚ùì"
                    direct_link = ""

                dialogs.append(f"<a href='{direct_link}'>üÜî </a><code>{dialog.chat.id}</code>\n<a href='https://docs.pyrogram.org/api/enums/ChatType#pyrogram.enums.{dialog.chat.type}'>{icon}</a> {display_name}{f'\nüîó @{dialog.chat.username}' if dialog.chat.username else ''}\n")

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if dialogs:
                result = f"Recent {limit} chats:\n\n" + "\n".join(dialogs)
            else:
                result = "‚ö†Ô∏è No available chats"
        except Exception as e:
            result = f"‚ö†Ô∏è An error occurred: {e}"
            print(result)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram-—á–∞—Ç
        await update.message.reply_text(result, parse_mode="HTML", disable_web_page_preview=True)

# –∫–æ–º–∞–Ω–¥–∞ /ai
async def ai_query(update: Update, context: CallbackContext) -> None:
    log_to_console(update)
    user_id = update.message.from_user.id  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if update.message.from_user.username == admin_username:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        if context.args:
            query = " ".join(context.args)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É
            processing_message = await update.message.reply_text("‚è≥ Processing answer...")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if user_id not in dialog_history:
                dialog_history[user_id] = []

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            dialog_history[user_id].append(f"User: {query}")

            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
                context_for_ai = "\n".join(dialog_history[user_id])

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Geminy
                ai_response = AI_client.models.generate_content(
                    model="gemini-2.0-flash",
                    contents=context_for_ai,
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ response —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º
                response = ai_response if isinstance(ai_response, str) else ai_response.text

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é
                dialog_history[user_id].append(f"AI: {response}")

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
                if len(dialog_history[user_id]) > 20:
                    dialog_history[user_id] = dialog_history[user_id][-20:]

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await processing_message.edit_text(
                    f"ü§ñ AI Response:\n<blockquote>{bleach.clean(markdown.markdown(response), tags=allowed_tags, strip=True)}</blockquote>",
                    parse_mode="HTML",
                    disable_web_page_preview=True,
                )
            except Exception as e:
                await processing_message.edit_text(f"‚ö†Ô∏è An error occurred while processing your query: {e}")
        else:
            await update.message.reply_text("‚ö†Ô∏è Please provide a query after the /ai command.")

# –∫–æ–º–∞–Ω–¥–∞ /ai_clean
async def ai_clean(update: Update, context: CallbackContext) -> None:
    print("dialog_history:\n"+str(dialog_history))
    user_id = update.message.from_user.id
    if user_id in dialog_history:
        del dialog_history[user_id]
    await update.message.reply_text("üóëÔ∏è AI dialogue history cleared.")
    print("üóëÔ∏è AI dialogue history cleared.")

# –∫–æ–º–∞–Ω–¥–∞ /id
async def reply_id(update: Update, context: CallbackContext) -> None:
    log_to_console(update)
    if update.message.from_user.username == admin_username:

        if update.message.reply_to_message:
            replied_message_id = update.message.reply_to_message.message_id
            await update.message.reply_text(f"üÜî The ID of the replied message is: {replied_message_id}")
        else:
            await update.message.reply_text("‚ö†Ô∏è Please reply to a message to use this command.")

# –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def echo(update: Update, context: CallbackContext) -> None:
    log_to_console(update)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–Ω–æ–π
    if update.message.from_user.username == admin_username:

        # –û–¢–í–ï–¢–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
        if update.message.reply_to_message:
            global my_chat_histoty  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

            AI_prompt_in_message = update.message.text
            print("AI_prompt_in_message:\n"+AI_prompt_in_message)
            result = "ü§ñ AI Summary:\n"
            processing_message = await update.message.reply_text(result+"‚è≥ Loading...", parse_mode="HTML") #, reply_to_message_id=update.message.message_id

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Geminy
            try:
                ai_response = AI_client.models.generate_content(
                    model="gemini-2.0-flash",
                    contents=f"{AI_prompt_in_message}\n\n{my_chat_histoty}",
                )
                response = ai_response if isinstance(ai_response, str) else ai_response.text
                result += f"<blockquote>{bleach.clean(markdown.markdown(response), tags=allowed_tags, strip=True)}</blockquote>"
            except Exception as e:
                result += f"‚ö†Ô∏è Error: {e}"
            
            # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
            await processing_message.edit_text(result, parse_mode="HTML", disable_web_page_preview=True)

        
        # –ó–ê–ü–†–û–°
        else:

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ 1
            processing_message = await update.message.reply_text("‚è≥ Loading...")

            # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                lines = update.message.text.split("\n")
                chat_id = lines[0].strip()
                try:
                    msg_count = int(lines[1].strip())
                except (IndexError, ValueError):
                    msg_count = 10  # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            except (IndexError, ValueError):
                await processing_message.edit_text("‚ö†Ô∏è Error: Invalid input format. Please provide chat_id on the first line and msg_count on the second line.")
                return

            # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ Pyrogram
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                chat = await app.get_chat(chat_id)  # –£–±—Ä–∞–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ async with
                result = f"üí¨ ''{chat.title or chat.first_name}''\nüÜî <code>{chat_id}</code>\n#Ô∏è‚É£ last {msg_count} messages:\n"
                await processing_message.edit_text(result + '\n‚è≥ Loading...', parse_mode="HTML")

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
                messages = []
                async for msg in app.get_chat_history(chat_id, limit=msg_count):  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è
                    messages.append(msg)

                    # –§–æ—Ä–º–∏—Ä—É–µ–º ASCII –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    progress_bar_length = 30  # –î–ª–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                    progress = int((len(messages) / msg_count) * progress_bar_length)  # 20 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–µ
                    progress_bar = f"{'‚ñà' * progress}{'‚ñë' * (progress_bar_length - progress)}" 
                    
                    remaining_sec = round((msg_count - len(messages)) * delay_TG, 1)  # –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    remaining_time_str = f"{remaining_sec} sec"  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è
                    if remaining_sec >= 60:
                        remaining_time_str = f"{remaining_sec // 60} min {remaining_sec % 60} sec"
                    

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                    await processing_message.edit_text(
                        result + f"\n‚è≥ Loading... {len(messages)}/{msg_count} apx {remaining_time_str} left\n<code>{progress_bar}</code> {round(len(messages) / msg_count * 100, 1)}%",
                        parse_mode="HTML"
                    )
                    await asyncio.sleep(delay_TG)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ API

                if messages:
                    my_chat_histoty = ""  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
                    for msg in reversed(messages):  # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                        sender_name = msg.from_user.first_name if msg.from_user else "Unknown user"
                        message_time = msg.date.strftime('%Y-%m-%d %H:%M') if msg.date else "Unknown time"

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                        if msg.text:
                            content = msg.text
                        elif msg.photo:
                            content = f"(image) {msg.caption or ''}"
                        elif msg.sticker:
                            content = f"({msg.sticker.emoji or ''} sticker)"
                        elif msg.video:
                            content = f"(video) {msg.caption or ''}"
                        elif msg.voice:
                            content = f"(voice message, {msg.voice.duration} sec long) {msg.caption or ''}"
                        elif msg.video_note:
                            content = f"(video message, {msg.video_note.duration} sec long)"
                        elif msg.document:
                            content = f"(document) {msg.document.file_name or ''}"
                        elif msg.animation:
                            content = "(GIF animation)"
                        elif msg.location:
                            content = f"(location: {msg.location.latitude}, {msg.location.longitude} )"
                        elif msg.poll:
                            options = ", ".join([f'"{option.text}"' for option in msg.poll.options])  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                            content = f"(poll ''{msg.poll.question}'', with options: {options})"
                        elif msg.new_chat_members:
                            content = f"({', '.join([member.first_name for member in msg.new_chat_members])} joined the chat)"
                        elif msg.left_chat_member:
                            content = f"({msg.left_chat_member.first_name} left the chat)"
                        else:
                            content = "(unknown message type)"

                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        my_chat_histoty += f"[{sender_name} at {message_time}]:\n{content}\n\n"

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
                    lines = my_chat_histoty.splitlines()
                    if len(lines) > lines_crop * 2:
                        # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫, –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
                        shortened_history = "\n".join(lines[:lines_crop]) + f"\n\n...and {len(lines) - lines_crop * 2} more lines...\n\n\n" + "\n".join(lines[-lines_crop:])
                    else:
                        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫ –º–µ–Ω—å—à–µ 40, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—ë
                        shortened_history = my_chat_histoty

                    if messages:
                        first_message = messages[-1]
                        first_message_link = f"https://t.me/c/{str(chat.id)[3:]}/{first_message.id}" if chat.type in [ChatType.SUPERGROUP, ChatType.CHANNEL] else ""
                        time_since_first_message = datetime.now() - first_message.date
                    
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                        if time_since_first_message.days > 0:
                            time_since_str = f"{time_since_first_message.days} days ago"
                        elif time_since_first_message.seconds >= 3600:
                            time_since_str = f"{time_since_first_message.seconds // 3600} hours ago"
                        elif time_since_first_message.seconds >= 60:
                            time_since_str = f"{time_since_first_message.seconds // 60} minutes ago"
                        else:
                            time_since_str = "just now"
                    
                        result += f"üîù <a href='{first_message_link}'>First message</a> {time_since_str}" if first_message_link else f"üîù First message was sent {time_since_str}, but link is unavailable"
                        result += f"<blockquote expandable>{shortened_history}</blockquote>"

                        await process_ai_summary(update, processing_message)

                else:
                    result = f"‚ö†Ô∏è The chat with ID {chat_id} is empty or unavailable."
                    print(result)
            except PeerIdInvalid:
                result = f"‚ö†Ô∏è Error: The chat with ID {chat_id} is unavailable."
                print(result)
            except Exception as e:
                result = f"‚ö†Ô∏è An error occurred: {e}"
                print(result)

            await processing_message.edit_text(result, parse_mode="HTML", disable_web_page_preview=True)

# –ù–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ AI Summary
async def process_ai_summary(update: Update, processing_message) -> None:
    result = "ü§ñ AI Summary:\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Geminy
    try:
        ai_response = AI_client.models.generate_content(
            model="gemini-2.0-flash",
            contents=f"{AI_prompt}\n\n{my_chat_histoty}",
        )
        response = ai_response if isinstance(ai_response, str) else ai_response.text
        result += f"<blockquote>{bleach.clean(markdown.markdown(response), tags=allowed_tags, strip=True)}</blockquote>"
    except Exception as e:
        result += f"‚ö†Ô∏è Error: {e}"
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await processing_message.edit_text(result, parse_mode="HTML", disable_web_page_preview=True)

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def log_message(update: Update, context: CallbackContext) -> None:
    log_to_console(update)

def log_to_console(update: Update) -> None:
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    username = update.message.from_user.username if update.message.from_user else "(Unknown user)"
    message_text = update.message.text if update.message.text else "(non-text message)"

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f"\nüó®Ô∏è [{current_time} @{username}]\n{message_text}")
    if update.message.from_user.username != admin_username:
        print(f"‚ö†Ô∏è Message from an unknown user. Ignored.")


async def send_startup_message(application: Application):
    async with application:
        await application.bot.send_message(chat_id=admin_username, text="üöÄ Script updated and started!")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞
def main() -> None:
    print("üöÄ Script started!")
    application = Application.builder().token(TGbot_token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("ping", ping))
    application.add_handler(CommandHandler("list", list_chats))
    application.add_handler(CommandHandler("ai", ai_query))
    application.add_handler(CommandHandler("ai_clean", ai_clean))
    application.add_handler(CommandHandler("id", reply_id))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    application.add_handler(MessageHandler(filters.ALL, log_message))
    
    ''' –î–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã:
    list - <n> show recent chats (default: 5 chats)
    ping - check the bot's connectivity
    start - test
    id - test. get the ID of the replied message
    ai -  test. Ask AI Gemini directly
    ai_clean -  test. Clear the AI dialogue history
    '''


    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram
    app.start()  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Pyrogram

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–ø—É—Å–∫–µ —Å–∫—Ä–∏–ø—Ç–∞
        asyncio.run(send_startup_message(application))


    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        app.stop()

if __name__ == '__main__':
    main()