from pyrogram import Client  # type: ignore
from pyrogram.errors import PeerIdInvalid  # type: ignore
from pyrogram.enums import ChatType  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–µ—Ä–µ—á–∏—Å–ª–µ–Ω–∏–µ —Ç–∏–ø–æ–≤ —á–∞—Ç–æ–≤
from pyrogram.raw.functions.messages import GetDialogs
from pyrogram.raw.types import InputPeerEmpty
import telegram
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from datetime import datetime
import json
import asyncio
import os
import markdown # type: ignore
import bleach # type: ignore
allowed_tags = ['b', 'i', 'u', 'code', 'pre', 'a', 'blockquote']
from google import genai

# –î–õ–Ø –õ–û–ö–ê–õ–¨–ù–û–ì–û –ó–ê–ü–£–°–ö–ê
from config import admin_id, TG_api_id, TG_api_hash, TGbot_token, AI_api_key

# –î–õ–Ø –ó–ê–ü–£–°–ö–ê –í HEROKU
# import os
# admin_id = int(os.getenv("admin_id"))
# TG_api_id = os.getenv("TG_api_id")
# TG_api_hash = os.getenv("TG_api_hash")
# TGbot_token = os.getenv("TGbot_token")
# AI_api_key = os.getenv("AI_api_key")

if not all([admin_id, TG_api_id, TG_api_hash, TGbot_token, AI_api_key]):
    raise ValueError("One or more configuration variables are missing!")

AI_default_prompt = "–û—á–µ–Ω—å –∫–æ—Ä–æ—Ç–∫–æ –≤—ã–¥–µ–ª–∏ –≥–ª–∞–≤–Ω—ã–µ —Ç–µ–º—ã, –∏–¥–µ–∏, –ª—é–¥–∏ –∏—Ç–¥ –≤ —ç—Ç–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–µ. –ù–∞–ø–∏—à–∏ –ø—É–∫–Ω—Ç–∞–º–∏, –±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"
lines_crop = 10  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞. 3 –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–±—ã—á–Ω–æ 3 —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
delay_TG = 0.5  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ API Telegram

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
AI_client = genai.Client(api_key=AI_api_key)
userbotTG_client = Client("my_userbot", api_id=TG_api_id, api_hash=TG_api_hash)
botTG_client = Application.builder().token(TGbot_token).build()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–æ–≤
dialog_history = {}
my_chat_histoty = "No chat history available."

# –∫–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: CallbackContext) -> None:
    log_any_user(update)
    await update.message.reply_text('Hello World!')

# –∫–æ–º–∞–Ω–¥–∞ /ping
async def ping(update: Update, context: CallbackContext) -> None:
    log_any_user(update)
    print("update.message.from_user.id: "+str(update.message.from_user.id))
    print("admin_id: "+str(admin_id))
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
    if update.message.from_user.id == admin_id:

        results = []
        processing_message = await update.message.reply_text("\n".join(results) + "‚è≥ Running diagnostics...")

        # Check Telegram bot connectivity
        try:
            await context.bot.get_me()
            results.append("‚úÖ Telegram bot is working correctly.")
        except Exception as e:
            results.append(f"‚ùå Telegram bot error: {e}")

        # Check Pyrogram userbot connectivity
        try:
            await userbotTG_client.get_me()  # –£–±—Ä–∞–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ async with
            results.append("‚úÖ Pyrogram userbot is working correctly.")
        except Exception as e:
            results.append(f"‚ùå Pyrogram userbot error: {e}")

        # Check AI client connectivity
        try:
            AI_client.models.list()
            results.append("‚úÖ Geminy AI client is working correctly.")
        except Exception as e:
            results.append(f"‚ùå Geminy AI client error: {e}")

        # Send diagnostic results
        diagnostic_results = "\n".join(results)
        await processing_message.edit_text(
            "Bot is working! üëå<blockquote expandable>" + diagnostic_results + "</blockquote>",
            parse_mode="HTML"
        )

# –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –∏ —Å—Å—ã–ª–∫—É —á–∞—Ç–∞
def get_chat_icon_and_link(chat):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —á–∞—Ç–∞
    if chat.type == ChatType.PRIVATE:
        icon = "üë§"
        if chat.username: # –ï—Å–ª–∏ –µ—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º
            direct_link = f"https://t.me/{chat.username}"
        else:
            direct_link = f"tg://user?id={chat.id}"
    elif chat.type == ChatType.GROUP:
        icon = "ü´Ç"
        direct_link = f"https://t.me/joinchat/{chat.invite_link}" if chat.invite_link else ""
    elif chat.type == ChatType.SUPERGROUP:
        icon = "üë•"
        if chat.username: # –ï—Å–ª–∏ –µ—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º
            direct_link = f"https://t.me/{chat.username}"
        else:
            direct_link = f"https://t.me/c/{str(chat.id)[3:]}/-1"
    elif chat.type == ChatType.CHANNEL:
        icon = "üì¢"
        if chat.username: # –ï—Å–ª–∏ –µ—Å—Ç—å —é–∑–µ—Ä–Ω–µ–π–º
            direct_link = f"https://t.me/{chat.username}"
        else:
            direct_link = f"https://t.me/c/{str(chat.id)[3:]}/-1"
    elif chat.type == ChatType.BOT:
        icon = "ü§ñ"
        direct_link = f"https://t.me/{chat.username}" if chat.username else ""
    else:
        icon = "‚ùì"
        direct_link = ""
    return icon, direct_link

# –∫–æ–º–∞–Ω–¥–∞ /list
async def list_chats(update: Update, context: CallbackContext) -> None:
    log_any_user(update)
    if update.message.from_user.id == admin_id:
        try:
            limit = int(context.args[0]) if len(context.args) > 0 else 5
            if limit <= 0:
                limit = 5
        except ValueError:
            limit = 5

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
        filter_mapping = {
            "p": "private",
            "private": "private",
            "–ø—Ä–∏–≤–∞—Ç–Ω—ã–µ": "private",
            "–ª–∏—á–Ω—ã–µ": "private",
            "–ª–∏—á–∫–∞": "private",
            "–ª—Å": "private",
            "–æ—Å–æ–±–∏—Å—Ç—ñ": "private",
            "–¥–∏—Ä–µ–∫—Ç": "private",
            "dm": "private",
            "–¥–º": "private",

            "g": "group",
            "group": "group",
            "groups": "group",
            "chat": "group",
            "—á–∞—Ç": "group",
            "—á–∞—Ç—ã": "group",
            "–≥—Ä—É–ø–∞": "group",
            "–≥—Ä—É–ø–∏": "group",
            "–≥—Ä—É–ø–ø—ã": "group",

            "c": "channel",
            "channel": "channel",
            "channels": "channel",
            "–∫–∞–Ω–∞–ª": "channel",
            "–∫–∞–Ω–∞–ª—ã": "channel",
            "–∫–∞–Ω–∞–ª—á–∏–∫–∏": "channel",
            "—Ç–≥–∫": "channel"
            }
        filter_type = context.args[1].lower() if len(context.args) > 1 else None
        filter_type = filter_mapping.get(filter_type, None)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Å–ª–æ–≤–∞—Ä—å
        
        try:
            dialogs = []
            fetched_count = 0  # –°—á—ë—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤
            async for dialog in userbotTG_client.get_dialogs():
                # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É —á–∞—Ç–∞
                if filter_type:
                    if filter_type == "private" and dialog.chat.type != ChatType.PRIVATE:
                        continue
                    elif filter_type == "group" and dialog.chat.type not in [ChatType.GROUP, ChatType.SUPERGROUP]:
                        continue
                    elif filter_type == "channel" and dialog.chat.type != ChatType.CHANNEL:
                        continue

                # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–π –¥–∏–∞–ª–æ–≥ –≤ —Å–ø–∏—Å–æ–∫
                display_name = dialog.chat.title if dialog.chat.title else (dialog.chat.first_name or '') + ' ' + (dialog.chat.last_name or '')
                icon, direct_link = get_chat_icon_and_link(dialog.chat)
                
                dialogs.append(
                    "<a href='{direct_link}'>üÜî </a><code>{chat_id}</code>\n"
                    "<a href='https://docs.pyrogram.org/api/enums/ChatType#pyrogram.enums.{chat_type}'>{icon}</a> {display_name}"
                    "{username_link}\n".format(
                        direct_link=direct_link,
                        chat_id=dialog.chat.id,
                        chat_type=dialog.chat.type,
                        icon=icon,
                        display_name=display_name,
                        username_link=f"\nüîó @{dialog.chat.username}" if dialog.chat.username else ""
                    )
                )

                fetched_count += 1

                # –ü—Ä–µ—Ä—ã–≤–∞–µ–º, –µ—Å–ª–∏ –¥–æ—Å—Ç–∏–≥–ª–∏ –ª–∏–º–∏—Ç–∞
                if len(dialogs) >= limit:
                    break

            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if dialogs:
                result = f"Recent {limit} {filter_type + ' 'if filter_type else ''}chats:\n\n" + "\n".join(dialogs)
            else:
                result = "‚ö†Ô∏è No available chats"
        except Exception as e:
            result = f"‚ö†Ô∏è An error occurred: {e}"
            print(result)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram-—á–∞—Ç
        await update.message.reply_text(result, parse_mode="HTML", disable_web_page_preview=True)

# –∫–æ–º–∞–Ω–¥–∞ /ai
async def ai_query(update: Update, context: CallbackContext) -> None:
    log_any_user(update)
    user_id = update.message.from_user.id  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if update.message.from_user.id == admin_id:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        if context.args:
            query = " ".join(context.args)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É
            processing_message = await update.message.reply_text("‚è≥ Processing answer...")

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
            if user_id not in dialog_history:
                dialog_history[user_id] = []

            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∏—Å—Ç–æ—Ä–∏—é
            dialog_history[user_id].append(f"User: {query}")

            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ò–ò
                context_for_ai = "\n".join(dialog_history[user_id])

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Geminy
                ai_response = AI_client.models.generate_content(
                    model="gemini-2.0-flash",
                    contents=context_for_ai,
                )

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ response —Å—Ç—Ä–æ–∫–æ–π –∏–ª–∏ –æ–±—ä–µ–∫—Ç–æ–º
                response = ai_response if isinstance(ai_response, str) else ai_response.text

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ò–ò –≤ –∏—Å—Ç–æ—Ä–∏—é
                dialog_history[user_id].append(f"AI: {response}")

                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –∏—Å—Ç–æ—Ä–∏–∏ –¥–æ 20 —Å–æ–æ–±—â–µ–Ω–∏–π
                if len(dialog_history[user_id]) > 20:
                    dialog_history[user_id] = dialog_history[user_id][-20:]

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await processing_message.edit_text(
                    f"ü§ñ AI Response:\n<blockquote>{bleach.clean(markdown.markdown(response), tags=allowed_tags, strip=True)}</blockquote>",
                    parse_mode="HTML",
                    disable_web_page_preview=True,
                )
            except Exception as e:
                await processing_message.edit_text(f"‚ö†Ô∏è An error occurred while processing your query: {e}")
        else:
            await update.message.reply_text("‚ö†Ô∏è Please provide a query after the /ai command.")

# –∫–æ–º–∞–Ω–¥–∞ /ai_clean
async def ai_clean(update: Update, context: CallbackContext) -> None:
    print("dialog_history:\n"+str(dialog_history))
    user_id = update.message.from_user.id
    if user_id in dialog_history:
        del dialog_history[user_id]
    await update.message.reply_text("üóëÔ∏è AI dialogue history cleared.")
    print("üóëÔ∏è AI dialogue history cleared.")

# –∫–æ–º–∞–Ω–¥–∞ /json
async def send_json(update: Update, context: CallbackContext) -> None:
    log_any_user(update)
    test_json = {
        "name": "Test User",
        "age": 25,
        "email": "testuser@example.com",
        "is_admin": False,
        "preferences": {
            "theme": "dark",
            "notifications": True
        }
    }
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º JSON –≤ —Ñ–∞–π–ª
    file_path = "test_data.json"
    with open(file_path, "w", encoding="utf-8") as file:
        import json
        json.dump(test_json, file, indent=4, ensure_ascii=False)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await context.bot.send_document(
        chat_id=update.message.chat_id,
        document=open(file_path, "rb"),
        filename="test_data.json",
        caption="üìÑ Here is your test JSON file."
    )

# –∫–æ–º–∞–Ω–¥–∞ /id
async def reply_id(update: Update, context: CallbackContext) -> None:
    log_any_user(update)
    if update.message.from_user.id == admin_id:

        if update.message.reply_to_message:
            replied_message_id = update.message.reply_to_message.message_id
            await update.message.reply_text(f"üÜî The ID of the replied message is: {replied_message_id}")
        else:
            await update.message.reply_text("‚ö†Ô∏è Please reply to a message to use this command.")

# –û—Å–Ω–æ–≤–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def echo(update: Update, context: CallbackContext) -> None:
    log_any_user(update)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–Ω–æ–π
    if update.message.from_user.id == admin_id:
        global my_chat_histoty  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

        # –û–¢–í–ï–¢–ù–û–ï –°–û–û–ë–©–ï–ù–ò–ï
        if update.message.reply_to_message:
            await AI_answer(update, context, AI_question=update.message.text)  # –í—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ AI_answer –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
                
        # –°–û–û–ë–©–ï–ù–ò–ï –ó–ê–ü–†–û–°
        else:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            processing_message = await update.message.reply_text("‚è≥ Loading...", parse_mode="HTML", disable_web_page_preview=True)

            # –ß–∏—Ç–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            try:
                lines = update.message.text.split("\n")
                chat_id = lines[0].strip()
                try:
                    msg_count = int(lines[1].strip()) # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏
                except (IndexError, ValueError):
                    msg_count = 10  # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

                try:
                    AI_question = lines[2].strip()  # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—Ä–æ–∫–∏
                except IndexError:
                    AI_question = AI_default_prompt  # –ï—Å–ª–∏ —Ç—Ä–µ—Ç—å–µ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é


            except (IndexError, ValueError):
                await processing_message.edit_text("‚ö†Ô∏è Error: Invalid input format. Please provide chat_id on the first line, msg_count on the second line, and optionally a third line.")
                return

            # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ Pyrogram
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                chat = await userbotTG_client.get_chat(chat_id)  # –£–±—Ä–∞–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ async with
                icon, direct_link = get_chat_icon_and_link(chat)
                result = f"<a href='{direct_link}'>{icon} ''{chat.title or chat.first_name}''</a>\nüÜî <code>{chat_id}</code>\n#Ô∏è‚É£ last {msg_count} messages:\n"
                await processing_message.edit_text(result + '\n‚è≥ Loading...', parse_mode="HTML", disable_web_page_preview=True)

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
                messages = []
                async for msg in userbotTG_client.get_chat_history(chat_id, limit=msg_count):  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è
                    messages.append(msg)

                    # –§–æ—Ä–º–∏—Ä—É–µ–º ASCII –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                    progress_bar_length = 30  # –î–ª–∏–Ω–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                    progress = int((len(messages) / msg_count) * progress_bar_length)  # 20 —Å–∏–º–≤–æ–ª–æ–≤ –≤ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–µ
                    progress_bar = f"{'‚ñà' * progress}{'‚ñë' * (progress_bar_length - progress)}" 
                    
                    remaining_sec = int((msg_count - len(messages)) * delay_TG)  # –û—Å—Ç–∞–≤—à–µ–µ—Å—è –≤—Ä–µ–º—è –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    if remaining_sec <= 60:
                        remaining_time_str = f"{remaining_sec} sec"
                    else:
                         remaining_time_str = f"{remaining_sec // 60} min {remaining_sec % 60} sec"
                    

                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º
                    await processing_message.edit_text(
                        result + f"\n‚è≥ Loading...\n {len(messages)}/{msg_count} done ~{remaining_time_str} left\n<code>{progress_bar}</code> {round(len(messages) / msg_count * 100, 1)}%",
                        parse_mode="HTML",
                        disable_web_page_preview=True,
                    )
                    await asyncio.sleep(delay_TG)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ API

                if messages:
                    my_chat_histoty = []  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞ –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞
                    for msg in reversed(messages):  # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                        sender_name = msg.from_user.first_name if msg.from_user else "Unknown_user"
                        message_time = msg.date.strftime('%Y-%m-%d %H:%M') if msg.date else "Unknown time"

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                        if msg.text:
                            content = msg.text
                        elif msg.photo:
                            content = f"(image) {msg.caption or ''}"
                        elif msg.sticker:
                            content = f"({msg.sticker.emoji or ''} sticker)"
                        elif msg.video:
                            content = f"(video) {msg.caption or ''}"
                        elif msg.voice:
                            content = f"(voice message, {msg.voice.duration} sec long) {msg.caption or ''}"
                        elif msg.video_note:
                            content = f"(video message, {msg.video_note.duration} sec long)"
                        elif msg.document:
                            content = f"(document) {msg.document.file_name or ''}"
                        elif msg.animation:
                            content = "(GIF animation)"
                        elif msg.location:
                            content = f"(location: {msg.location.latitude}, {msg.location.longitude} )"
                        elif msg.poll:
                            options = ", ".join([f'"{option.text}"' for option in msg.poll.options])  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                            content = f"(poll ''{msg.poll.question}'', with options: {options})"
                        elif msg.new_chat_members:
                            content = f"({', '.join([member.first_name for member in msg.new_chat_members])} joined the chat)"
                        elif msg.left_chat_member:
                            content = f"({msg.left_chat_member.first_name} left the chat)"
                        else:
                            content = "(unknown message type)"

                        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–ø–∏—Å–æ–∫
                        my_chat_histoty.append({
                            "sender": sender_name,
                            "time": message_time,
                            "content": content
                        })

                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –≤ JSON-—Ñ–∞–π–ª
                    file_path = f"tg_{msg_count}-msgs-from-{chat.title or chat.first_name}.json"
                    
                    # –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
                    chat_json_data = {
                        "chat_title": chat.title or chat.first_name or "Unknown Chat",
                        "chat_type": chat.type.name if chat.type else "Unknown Type",
                        "link": direct_link,
                        "messages": my_chat_histoty
                        # "participants": []
                    }

                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON-—Ñ–∞–π–ª
                    with open(file_path, "w", encoding="utf-8") as file:
                        json.dump(chat_json_data, file, indent=4, ensure_ascii=False)
                    
                    print(f"\nüíæ Chat history '{file_path}' saved!")


                    first_message = messages[-1]
                    first_message_link = f"https://t.me/c/{str(chat.id)[3:]}/{first_message.id}" if chat.type in [ChatType.SUPERGROUP, ChatType.CHANNEL] else ""
                    time_since_first_message = datetime.now() - first_message.date
                
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    if time_since_first_message.days > 0:
                        time_since_str = f"{time_since_first_message.days} days ago"
                    elif time_since_first_message.seconds >= 3600:
                        time_since_str = f"{time_since_first_message.seconds // 3600} hours ago"
                    elif time_since_first_message.seconds >= 60:
                        time_since_str = f"{time_since_first_message.seconds // 60} minutes ago"
                    else:
                        time_since_str = "just now"
                
                    result += f"üîù <a href='{first_message_link}'>First message</a> {time_since_str}" if first_message_link else f"üîù First message was sent {time_since_str}"
    

                    chat_history_preview = ""
                    lines_count = 1
                    print(f"is {len(result)} + {len(my_chat_histoty)} < 4096 ?")
                    if len(result) + len(my_chat_histoty) < 4096:
                        print("yes\n")
                        chat_history_preview = "\n".join([
                            f"[{msg['sender']} at {msg['time']}]:\n{msg['content']}\n"
                            for msg in my_chat_histoty
                        ])
                    else:
                        print("no")
                        while len(result)+len(chat_history_preview) < 4096:
                            chat_history_preview = "\n".join([
                                f"[{msg['sender']} at {msg['time']}]:\n{msg['content']}\n"
                                for msg in my_chat_histoty[:lines_count]
                                ]) + f"\n... and {len(my_chat_histoty) - (lines_count * 2)} more lines ...\n\n" + "\n".join([
                                f"[{msg['sender']} at {msg['time']}]:\n{msg['content']}\n"
                                for msg in my_chat_histoty[-lines_count:]
                            ])
                            lines_count += 1
                            print(f"lines_count: {lines_count}")
                            print(f"shortened_history len: {len(chat_history_preview)}")

                    print(f"{len(result)} + {len(my_chat_histoty)} < 4096\n")
                    result += f"<blockquote expandable>{chat_history_preview}</blockquote>"

                else:
                    result = f"‚ö†Ô∏è The chat with ID {chat_id} is empty or unavailable."
                    print(result)
            except PeerIdInvalid:
                result = f"‚ö†Ô∏è Error: The chat with ID {chat_id} is unavailable."
                print(result)
            except Exception as e:
                result = f"‚ö†Ô∏è An error occurred: {e}"
                print(result)

            await processing_message.edit_text(result, parse_mode="HTML", disable_web_page_preview=True)
            print("\nüí¨ [ chat preview ]")

            await context.bot.send_document(
                chat_id=admin_id,
                document=open(file_path, "rb"),
                filename=file_path,
                caption=f"üìÑ Chat history from  '{chat.title or chat.first_name}'"
            )
            print("üí¨ [ chat history file ]")


            # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª —Å —Ä–∞–±–æ—á–µ–π –ø–∞–ø–∫–∏
            try:
                os.remove(file_path)
                print(f"üóëÔ∏è File '{file_path}' has been deleted from working folder")
            except Exception as e:
                print(f"‚ö†Ô∏è Error deleting file '{file_path}': {e}")

            await AI_answer(update, context, AI_question=AI_question)


# AI –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def AI_answer(update: Update, context: CallbackContext, AI_question) -> None:
    global my_chat_histoty  # –£–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±—É–¥–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é

    # AI_prompt_in_message = update.message.text
    print("üí¨ [ AI answer ]")
    result = "ü§ñ AI answer:\n"
    processing_message = await update.message.reply_text(result+"‚è≥ Loading...", parse_mode="HTML") #, reply_to_message_id=update.message.message_id

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Geminy
    try:
        ai_response = AI_client.models.generate_content(
            model="gemini-2.0-flash",
            contents=f"{AI_question}\n\n{my_chat_histoty}",
        )
        response = ai_response if isinstance(ai_response, str) else ai_response.text
        result += f"<blockquote>{bleach.clean(markdown.markdown(response), tags=allowed_tags, strip=True)}</blockquote>"
    except Exception as e:
        result += f"‚ö†Ô∏è Error: {e}"
    
    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await processing_message.edit_text(result, parse_mode="HTML", disable_web_page_preview=True)

# –≤—Å–µ –ø—Ä–∏—Ö–æ–¥—è—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
async def log_message(update: Update, context: CallbackContext) -> None:

    log_any_user(update)
    
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –∫–æ–Ω—Å–æ–ª—å
def log_any_user(update: Update) -> None:
    current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    username = f"@{update.message.from_user.username}" if update.message.from_user.username else "(no username)"
    message_text = update.message.text if update.message.text else "(non-text message)"
    user_id = update.message.from_user.id if update.message.from_user else "(Unknown user ID)"
    user_name = update.message.from_user.first_name or '' + ' ' + (update.message.from_user.last_name or '')

    # –í—ã–≤–æ–¥–∏–º –≤ –∫–æ–Ω—Å–æ–ª—å
    print(f"\nüó®Ô∏è [{current_time} {username}]\n{message_text}")

    if update.message.from_user.id != admin_id:
        asyncio.create_task(send_message(f"‚ö†Ô∏è Message from an unknown user!\n üë§ {user_name}\n{username}\nüÜî <code>{user_id}</code>\nmessage:"))
        asyncio.create_task(forward_message_to_admin(update))

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def forward_message_to_admin(update: Update):
    bot = telegram.Bot(token=TGbot_token)
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º copy_message –¥–ª—è –ø–µ—Ä–µ—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ç–æ–º –∂–µ –≤–∏–¥–µ
        await bot.copy_message(
            chat_id=admin_id,  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            from_chat_id=update.message.chat_id,  # ID —á–∞—Ç–∞, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–ª–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_id=update.message.message_id  # ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        )
        print(f"üí¨ Message forwarded to admin.")
    except Exception as e:
        print(f"‚ö†Ô∏è Error forwarding message to admin: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def send_message(text: str):
    bot = telegram.Bot(token=TGbot_token)
    try:
        await bot.send_message(chat_id=admin_id, text=f"{text}", parse_mode="HTML")
        print(f"üí¨ Message sent to admin: {text}")
    except Exception as e:
        print(f"‚ö†Ô∏è Error sending message to admin: {e}")
        



# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞
def main() -> None:
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    botTG_client.add_handler(CommandHandler("start", start))
    botTG_client.add_handler(CommandHandler("ping", ping))
    botTG_client.add_handler(CommandHandler("list", list_chats))
    botTG_client.add_handler(CommandHandler("ai", ai_query))
    botTG_client.add_handler(CommandHandler("ai_clean", ai_clean))
    botTG_client.add_handler(CommandHandler("json", send_json))
    botTG_client.add_handler(CommandHandler("id", reply_id))
    botTG_client.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    botTG_client.add_handler(MessageHandler(filters.ALL, log_message))
    
    ''' –î–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞ –∫–æ–º–∞–Ω–¥—ã:
    list - <n> <private/group/channel> show recent chats
    ping - check the bot's connectivity
    start - test
    id - test. get the ID of the replied message
    ai -  test. Ask AI Gemini directly
    ai_clean -  test. Clear the AI dialogue history
    '''

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        botTG_client.run_polling()
    finally:
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        userbotTG_client.stop()

if __name__ == '__main__':
    print("üöÄ Script started!")

    # –°–æ–∑–¥–∞—ë–º —Ü–∏–∫–ª —Å–æ–±—ã—Ç–∏–π
    loop = asyncio.get_event_loop()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    loop.run_until_complete(send_message("üöÄ Script updated and started!"))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç–∞ Pyrogram
    userbotTG_client.start()  # –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Pyrogram

    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –±–æ—Ç–∞
    main()