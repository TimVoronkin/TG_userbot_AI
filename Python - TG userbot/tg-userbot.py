from pyrogram import Client  # type: ignore
from pyrogram.errors import PeerIdInvalid  # type: ignore
from telegram import Update
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
from datetime import datetime
import asyncio
import markdown # type: ignore
import bleach # type: ignore
allowed_tags = ['b', 'i', 'u', 'code', 'pre', 'a', 'blockquote']
from google import genai  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Geminy

from config import admin_username, TG_api_id, TG_api_hash, TGbot_token, AI_api_key  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–∞ Geminy
AI_client = genai.Client(api_key=AI_api_key)
AI_prompt = "–°–æ–∫—Ä–∞—Ç–∏ –ø–µ—Ä–µ–ø–∏—Å–∫—É –¥–æ —Å—É—Ç–∏, —Ä–∞—Å—Å–∫–∞–∂–∏ —Ç–µ–º—ã, –∫–ª—é—á–µ–≤—ã–µ –∏–¥–µ–∏, –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –ø–æ–≤–æ—Ä–æ—Ç—ã, —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤. –ë–µ–∑ –≤–æ–¥—ã, –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ –ø–æ–Ω—è—Ç–Ω–æ."

lines_crop = 10 * 3  # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–π –≤–µ—Ä—Å–∏–∏ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞. 3 –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–±—ã—á–Ω–æ 3 —Å—Ç—Ä–æ–∫–∏ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text('Hello World!')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /list
async def list_chats(update: Update, context: CallbackContext) -> None:
    if update.message.from_user.username == admin_username:
        # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
        try:
            limit = int(context.args[0]) if context.args else 5  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–∞ –∏–ª–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 5
            if limit <= 0:
                limit = 5  # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        except ValueError:
            limit = 5  # –ï—Å–ª–∏ –∞—Ä–≥—É–º–µ–Ω—Ç –Ω–µ —á–∏—Å–ª–æ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Pyrogram
        app = Client("my_userbot", api_id=TG_api_id, api_hash=TG_api_hash)

        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ Pyrogram
        async with app:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
            try:
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —á–∞—Ç–æ–≤
                dialogs = []
                async for dialog in app.get_dialogs(limit=limit):
                    dialogs.append(f"üÜî <code>{dialog.chat.id}</code>\nüë§ {dialog.chat.first_name} {dialog.chat.last_name}\nüë• {dialog.chat.title}\nüîó @{dialog.chat.username}\nüß¨{dialog.chat.type}\n")

                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                if dialogs:
                    result = f"Recent {limit} chats:\n\n" + "\n".join(dialogs)
                else:
                    result = "No available chats"
            except Exception as e:
                result = f"An error occurred: {e}"
                print(result)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ–±—Ä–∞—Ç–Ω–æ –≤ Telegram-—á–∞—Ç
        await update.message.reply_text(result, parse_mode="HTML")
    else:
        # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        print("Message from an unknown user. Ignored.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def echo(update: Update, context: CallbackContext) -> None:
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –º–Ω–æ–π
    if update.message.from_user.username == admin_username:
        processing_message = await update.message.reply_text("‚è≥ Loading...")

        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
        current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
        print(f"[{current_time}] Message from {update.message.from_user.username}: {update.message.text}")

        # –†–∞–∑–¥–µ–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
        try:
            lines = update.message.text.split("\n")
            chat_id = lines[0].strip()  # –ü–µ—Ä–≤—ã–π —Ä—è–¥–æ–∫ ‚Äî chat_id
            try:
                msg_count = int(lines[1].strip())  # –í—Ç–æ—Ä–æ–π —Ä—è–¥–æ–∫ ‚Äî msg_count
            except (IndexError, ValueError):
                msg_count = 10  # –ï—Å–ª–∏ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–∏ –Ω–µ—Ç –∏–ª–∏ –æ–Ω–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        except (IndexError, ValueError):
            await processing_message.edit_text("Error: Invalid input format. Please provide chat_id on the first line and msg_count on the second line.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Pyrogram
        app = Client("my_userbot", api_id=TG_api_id, api_hash=TG_api_hash)

        # –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ Pyrogram
        async with app:  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç–Ω—ã–π –º–µ–Ω–µ–¥–∂–µ—Ä
            try:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
                chat = await app.get_chat(chat_id)
                result = f"üí¨ ''{chat.title or chat.first_name}''\nüÜî <code>{chat_id}</code>\n#Ô∏è‚É£ last {msg_count} messages:\n"
                await processing_message.edit_text(result+'\n‚è≥ Loading...', parse_mode="HTML")

                # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —á–∞—Ç–∞
                messages = []
                async for msg in app.get_chat_history(chat_id, limit=msg_count):  # –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∏—Ç–µ—Ä–∞—Ü–∏—è
                    messages.append(msg)
                    await asyncio.sleep(1)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø—Ä–µ–≤—ã—à–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ API

                if messages:
                    my_chat_histoty = ""  # –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
                    for msg in reversed(messages):  # –ü–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –¥–ª—è –≤—ã–≤–æ–¥–∞ –≤ –ø–æ—Ä—è–¥–∫–µ –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
                        sender_name = msg.from_user.first_name if msg.from_user else "Unknown user"
                        message_time = msg.date.strftime('%Y-%m-%d %H:%M') if msg.date else "Unknown time"

                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
                        if msg.text:
                            content = msg.text
                        elif msg.photo:
                            content = f"(image) {msg.caption or ''}"
                        elif msg.sticker:
                            content = f"({msg.sticker.emoji or ''} sticker)"
                        elif msg.video:
                            content = f"(video) {msg.caption or ''}"
                        elif msg.voice:
                            content = f"(voice message, {msg.voice.duration} sec long) {msg.caption or ''}"
                        elif msg.video_note:
                            content = f"(video message, {msg.video_note.duration} sec long)"
                        elif msg.document:
                            content = f"(document) {msg.document.file_name or ''}"
                        elif msg.animation:
                            content = "(GIF animation)"
                        elif msg.location:
                            content = f"(location: {msg.location.latitude}, {msg.location.longitude} )"
                        elif msg.poll:
                            options = ", ".join([f'"{option.text}"' for option in msg.poll.options])  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –∏–∑ –∫–∞–∂–¥–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
                            content = f"(poll ''{msg.poll.question}'', with options: {options})"
                        elif msg.new_chat_members:
                            content = f"({', '.join([member.first_name for member in msg.new_chat_members])} joined the chat)"
                        elif msg.left_chat_member:
                            content = f"({msg.left_chat_member.first_name} left the chat)"    
                        else:
                            content = "(unknown message type)"

                        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
                        my_chat_histoty += f"[{sender_name} at {message_time}]:\n{content}\n\n"

                    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–∫—Ä–∞—â—ë–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
                    lines = my_chat_histoty.splitlines()
                    if len(lines) > lines_crop * 2:
                        # –ë–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 20 —Å—Ç—Ä–æ–∫, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ —Å—Ç—Ä–æ–∫, –∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 —Å—Ç—Ä–æ–∫
                        shortened_history = "\n".join(lines[:lines_crop]) + f"\n\n...and {len(lines) - lines_crop*2} more lines...\n\n\n" + "\n".join(lines[-lines_crop:])
                    else:
                        # –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫ –º–µ–Ω—å—à–µ 40, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å—ë
                        shortened_history = my_chat_histoty

                    result += f"<blockquote expandable>{shortened_history}</blockquote>"
                    result += "\nü§ñ AI Summary:\n"

                    await processing_message.edit_text(result+'\n‚è≥ Loading...', parse_mode="HTML")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞ –≤ –ò–ò
                    try:
                        ai_response = AI_client.models.generate_content(
                            model="gemini-2.0-flash",
                            contents=f"{AI_prompt}\n\n{my_chat_histoty}",
                        )
                        result += f"<blockquote>{bleach.clean(markdown.markdown(ai_response.text), tags=allowed_tags, strip=True)}</blockquote>"
                    except Exception as e:
                        result += f"Error: {e}"

                else:
                    result = f"The chat with ID {chat_id} is empty or unavailable."
                    print(result)
            except PeerIdInvalid:
                result = f"Error: The chat with ID {chat_id} is unavailable."
                print(result)
            except Exception as e:
                result = f"An error occurred: {e}"
                print(result)

        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
        await processing_message.edit_text(result, parse_mode="HTML", disable_web_page_preview=True)

    else:
        # –ò–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç
        print("Message from an unknown user. Ignored.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /ai
async def ai_query(update: Update, context: CallbackContext) -> None:
    if update.message.from_user.username == admin_username:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∑–∞–ø—Ä–æ—Å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
        if context.args:
            query = " ".join(context.args)  # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –≤ —Å—Ç—Ä–æ–∫—É
            processing_message = await update.message.reply_text("Processing your AI query...")

            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Geminy
                response = AI_client.models.generate_content(
                    model="gemini-2.0-flash",
                    contents=query,
                )

                # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞
                ai_response = response.text
                await processing_message.edit_text(f"ü§ñ AI Response:\n{ai_response}")
            except Exception as e:
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—à–∏–±–∫–∏
                await processing_message.edit_text(f"An error occurred while processing your query: {e}")
        else:
            await update.message.reply_text("Please provide a query after the /ai command.")
    else:
        print("Message from an unknown user. Ignored.")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ Telegram-–±–æ—Ç–∞
def main() -> None:
    print("üöÄ Script started!")
    application = Application.builder().token(TGbot_token).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("list", list_chats))
    application.add_handler(CommandHandler("ai", ai_query))  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã /ai
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))

    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    application.run_polling()

if __name__ == '__main__':
    main()